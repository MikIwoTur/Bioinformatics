import re

# zadanie 1

s = "ATGCGCGCGGCGGATCGAATAGGCTAGCTAGGCTATATGCGCTATATGCGCCGTATAGGAGTCTAGCGTATATGCGATTCGATTCGTATAGCGTAGCTCTGAGACTCTGAGAGC"

Wynik = re.findall('G..TA', s)
print(Wynik)

# Output: ['GAATA', 'GGCTA', 'GGCTA', 'GTATA', 'GTCTA', 'GCGTA', 'GTATA', 'GCGTA']

# zadanie 2 dla przypadku pierwszego

f = open("ec.fasta", "r")
g = f.read()
f.close()
g = g.replace('\n', '')
N = len(g)

nukleotydy = ["A", "T", "G", "C"]
din = []

for n in nukleotydy:
    for m in nukleotydy:
            for a in nukleotydy:
                din.append(n + m + a)

Z = [len(re.findall('(?=' + x + ')', g)) / (N-2) for x in din]    
czestosci = dict(zip(din, [round(x, 5) for x in Z]))


def REV_COM_DNA(seq):
    complementary_code = {"A":"T", "T":"A", "G":"C", "C":"G"}
    rev_com_seq = ''
    for elem in seq:
        rev_com_seq = complementary_code[elem] + rev_com_seq
    return rev_com_seq


N_SK = [x for x in din if x != REV_COM_DNA(x)]

unikatowe = set() 
ile = []
for x in N_SK:
    for y in N_SK:
        if x == REV_COM_DNA(y) and x not in unikatowe and y not in unikatowe:
            ile.append(czestosci[x]/czestosci[y])
            unikatowe.add(x)
            unikatowe.add(y)

print(unikatowe)
print(ile)
print('\n')
print(sum(Z))
plt.hist(ile)
plt.show()

# zadanie 2 dla przykładu 2

f = open("ec.fasta", "r")
g = f.read()
f.close()
g = g.replace('\n', '')
N = len(g)

nukleotydy = ["A", "T", "G", "C"]
din = []

for n in nukleotydy:
    for m in nukleotydy:
            for a in nukleotydy:
                for w in nukleotydy:
                    din.append(n + m + a + w)

Z = [len(re.findall('(?=' + x + ')', g)) / (N-2) for x in din]    
czestosci = dict(zip(din, [round(x, 5) for x in Z]))


def REV_COM_DNA(seq):
    complementary_code = {"A":"T", "T":"A", "G":"C", "C":"G"}
    rev_com_seq = ''
    for elem in seq:
        rev_com_seq = complementary_code[elem] + rev_com_seq
    return rev_com_seq


N_SK = [x for x in din if x != REV_COM_DNA(x)]

unikatowe = set() 
ile = []
for x in N_SK:
    for y in N_SK:
        if x == REV_COM_DNA(y) and x not in unikatowe and y not in unikatowe:
            ile.append(czestosci[x]/czestosci[y])
            unikatowe.add(x)
            unikatowe.add(y)

print(unikatowe)
print(ile)
print('\n')
print(sum(Z))
plt.hist(ile)

# zadanie 3

""" skoro X zaliczamy jako dowolne białko, to mozemy zalozyc, ze na jego miejsce moze wejsc.
W zwiazku z tym dla pierwszego ciecia bedzie to liczba 8000 mozliwosci - dzieje sie tak,
poniewaz posiadamy 20 aminokwasow, wiec na miejsce X moze wejsc kazdy z nich.
pozostale procesy pozwole sobie wyjasnic juz tylko obliczeniami.
"""

DXXDX = 1 * 20 * 20 * 1 * 20
EXXDX = 1 * 20 * 20 * 1 * 20
DXXEX = 1 * 20 * 20 * 1 * 20
EXXEX = 1 * 20 * 20 * 1 * 20

kaspaza3 = (DXXDX, EXXDX, DXXEX, EXXEX)

print(sum(kaspaza3))
output: 32000

""" Identyczna sytuacja prezentuje sie z kalpainy 2, ktora to po prostu zawiera,
mniejsza ilosc sekwencji cietych.
"""

LXX = 1 * 20 * 20
VXX = 1 * 20 * 20
IXX = 1 * 20 * 20

kalapina2 = (LXX, VXX, IXX)

print(sum(kalpaina2))
# output: 1200

# zadanie 4 i 5

""" Z niewiadomego mi powodu pepstat zadzialal dopiero wtedy,
gdy wprowadzilem cala sekwencje na zasadzie kopiuj wklej. Ostatecznie udalo mi sie uzyskac nastepujace dane:

ilosc aminokwasow wchodzaca w sklad beta-spektryny: 2364 
waga: 274631.28
ladunek: -53.5 
liczba reszt:
    Asp:156
    Leu:246
    Val:109
    Ile:116
udzial aminokwasow polarnych: 1346
udzial aminokwasow niepolarnych: 1018
"""

# zadanie 6

biblioteka = """
MTTTVATDYDNIEIQQQYSDVNNRWDVDDWDNENSSARLFERSRIKALADEREAVQKKTFTKWVNSHLAR
VSCRITDLYTDLRDGRMLIKLLEVLSGERLPKPTKGRMRIHCLENVDKALQFLKEQRVHLENMGSHDIVD
GNHRLTLGLIWTIILRFQIQDISVETEDNKEKKSAKDALLLWCQMKTAGYPNVNIHNFTTSWRDGMAFNA
LIHKHRPDLIDFDKLKKSNAHYNLQNAFNLAEQHLGLTKLLDPEDISVDHPDEKSIITYVVTYYHYFSKM
KALAVEGKRIGKVLDNAIETEKMIEKYESLASDLLEWIEQTIIILNNRKFANSLVGVQQQLQAFNTYRTV
EKPPKFTEKGNLEVLLFTIQSKMRANNQKVYMPREGKLISDINKAWERLEKAEHERELALRNELIRQEKL
EQLARRFDRKAAMRETWLSENQRLVSQDNFGFDLPAVEAATKKHEAIETDIAAYEERVQAVVAVARELEA
ENYHDIKRITARKDNVIRLWEYLLELLRARRQRLEMNLGLQKIFQEMLYIMDWMDEMKVLVLSQDYGKHL
LGVEDLLQKHTLVEADIGIQAERVRGVNASAQKFATDGEGYKPCDPQVIRDRVAHMEFCYQELCQLAAER
RARLEESRRLWKFFWEMAEEEGWIREKEKILSSDDYGKDLTSVMRLLSKHRAFEDEMSGRSGHFEQAIKE
GEDMIAEEHFGSEKIRERIIYIREQWANLEQLSAIRKKRLEEASLLHQFQADADDIDAWMLDILKIVSSS
DVGHDEYSTQSLVKKHKDVAEEIANYRPTLDTLHEQASALPQEHAESPDVRGRLSGIEERYKEVAELTRL
RKQALQDTLALYKMFSEADACELWIDEKEQWLNNMQIPEKLEDLEVIQHRFESLEPEMNNQASRVAVVNQ
IARQLMHSGHPSEKEIKAQQDKLNTRWSQFRELVDRKKDALLSALSIQNYHLECNETKSWIREKTKVIES
TQDLGNDLAGVMALQRKLTGMERDLVAIEAKLSDLQKEAEKLESEHPDQAQAILSRLAEISDVWEEMKTT
LKNREASLGEASKLQQFLRDLDDFQSWLSRTQTAIASEDMPNTLTEAEKLLTQHENIKNEIDNYEEDYQK
MRDMGEMVTQGQTDAQYMFLRQRLQALDTGWNELHKMWENRQNLLSQSHAYQQFLRDTKQAEAFLNNQEY
VLAHTEMPTTLEGAEAAIKKQEDFMTTMDANEEKINAVVETGRRLVSDGNINSDRIQEKVDSIDDRHRKN
RETASELLMRLKDNRDLQKFLQDCQELSLWINEKMLTAQDMSYDEARNLHSKWLKHQAFMAELASNKEWL
DKIEKEGMQLISEKPETEAVVKEKLTGLHKMWEVLESTTQTKAQRLFDANKAELFTQSCADLDKWLHGLE
SQIQSDDYGKHLTSVNILLKKQQMLENQMEVRKKEIEELQSQAQALSQEGKSTDEVDSKRLTVQTKFMEL
LEPLNERKHNLLASKEIHQFNRDVEDEILWVGERMPLATSTDHGHNLQTVQLLIKKNQTLQKEIQGHQPR
IDDIFERSQNIVTDSSSLSAEAIRQRLADLKQLWGLLIEETEKRHRRLEEAHRAQQYYFDAAEAEAWMSE
QELYMMSEEKAKDEQSAVSMLKKHQILEQAVEDYAETVHQLSKTSRALVADSHPESERISMRQSKVDKLY
AGLKDLAEERRGKLDERHRLFQLNREVDDLEQWIAEREVVAGSHELGQDYEHVTMLQERFREFARDTGNI
GQERVDTVNHLADELINSGHSDAATIAEWKDGLNEAWADLLELIDTRTQILAASYELHKFYHDAKEIFGR
IQDKHKKLPEELGRDQNTVETLQRMHTTFEHDIQALGTQVRQLQEDAARLQAAYAGDKADDIQKRENEVL
EAWKSLLDACESRRVRLVDTGDKFRFFSMVRDLMLWMEDVIRQIEAQEKPRDVSSVELLMNNHQGIKAEI
DARNDSFTTCIELGKSLLARKHYASEEIKEKLLQLTEKRKEMIDKWEDRWEWLRLILEVHQFSRDASVAE
AWLLGQEPYLSSREIGQSVDEVEKLIKRHEAFEKSAATWDERFSALERLTTLELLEVRRQQEEEERKRRP
PSPEPSTKVSEEAESQQQWDTSKGEQVSQNGLPAEQGSPRMAETVDTSEMVNGATEQRTSSKESSPIPSP
TSDRKAKTALPAQSAATLPARTQETPSAQMEGFLNRKHEWEAHNKKASSRSWHNVYCVINNQEMGFYKDA
KTAASGIPYHSEVPVSLKEAVCEVALDYKKKKHVFKLRLNDGNEYLFQAKDDEEMNTWIQAISSAISSDK
HEVSASTQSTPASSRAQTLPTSVVTITSESSPGKREKDKEKDKEKRFSLFGKKK
"""

szukajKaz3 = len(re.findall('([DE]..[DE].)', biblioteka))
""" funkcja szukajKaz3 pozwoli mi na zanlezienie ilosci miejsc ciecia kapsazy-3"""

szukajKal2 = len(re.findall('([ILV]..)', biblioteka))
""" analogicznie szuka ilosci mijesc ciecia dla kalpainy-2 """

print(szukajKal2)
print(szukajKaz3)

# zadanie 7 i 8

"""
W przypadku kaspazy-3, aby otrzymac sekwencje o masie 108 i 80 kDa miejsce ciecia mogloby sie znajdowac w pozycji:
    108: ELVDR (POzycja: 954-959).
    80: EMAEE (Pozycja: 654-659).

Dla kalpainy-2 miejsca te beda sie znajdowac w pozycjach:
    85: LEQ (738-741).
    110: LVD (955-958).
"""

